<form id="contactForm" class="contact-form" novalidate>
    <div class="form-row">
      <div class="form-col">
        <div class="form-group">
          <label for="nombre">Nombre</label>
          <input type="text" id="nombre" name="nombre" placeholder="Tu nombre" required aria-required="true" />
        </div>
      </div>
      <div class="form-col">
        <div class="form-group">
          <label for="apellido">Apellido</label>
          <input type="text" id="apellido" name="apellido" placeholder="Tu apellido" required aria-required="true" />
        </div>
      </div>
    </div>
  
    <div class="form-group">
      <label for="email">Email</label>
      <input type="email" id="email" name="email" placeholder="tu@email.com" required aria-required="true" />
    </div>
  
    <div class="form-group">
      <label for="telefono">Teléfono (opcional)</label>
      <input type="tel" id="telefono" name="telefono" placeholder="+34 XXX XXX XXX" />
    </div>
  
    <div class="form-group">
      <label for="asunto">Asunto</label>
      <input type="text" id="asunto" name="asunto" placeholder="¿En qué podemos ayudarte?" required aria-required="true" />
    </div>
  
    <div class="form-group">
      <label for="mensaje">Mensaje</label>
      <textarea id="mensaje" name="mensaje" placeholder="Describe tu consulta en detalle..." required aria-required="true"></textarea>
    </div>
  
    <div class="form-group" id="privacyNotice">
      <input type="checkbox" id="privacyCheck" name="privacyCheck" required aria-required="true" />
      <label for="privacyCheck">
        He leído y acepto la <a href="/politica-de-privacidad" target="_blank" rel="noopener noreferrer">Política de Privacidad</a>
      </label>
    </div>
  

  
    <div class="form-group">
      <button type="submit" id="submitButton" aria-describedby="privacyNotice">Enviar mensaje</button>
    </div>
  </form>
  
  <script lang="js">
    document.addEventListener("DOMContentLoaded", () => {
  const form = document.getElementById("contactForm");
  const submitBtn = document.getElementById("submitButton");

  form.addEventListener("submit", (e) => {
    e.preventDefault(); // prevenimos envío para validar primero

    // Limpiamos mensajes previos
    clearErrors();

    let isValid = true;

    // Validar campos requeridos manualmente para mostrar mensajes personalizados
    const requiredFields = [
      "nombre",
      "apellido",
      "email",
      "asunto",
      "mensaje",
      "privacyCheck",
    ];

    requiredFields.forEach((id) => {
      const field = form.elements[id];
      if (!field.checkValidity()) {
        isValid = false;
        showError(field, getErrorMessage(field));
      }
    });

    // Email formato
    const emailField = form.elements["email"];
    if (emailField.value && !emailField.checkValidity()) {
      isValid = false;
      showError(emailField, "Por favor, introduce un correo electrónico válido.");
    }

    // Teléfono opcional, pero si hay valor, validar patrón simple
    const telefonoField = form.elements["telefono"];
    if (
      telefonoField.value &&
      !/^\+?\d{6,15}$/.test(telefonoField.value.replace(/\s+/g, ""))
    ) {
      isValid = false;
      showError(
        telefonoField,
        "Por favor, introduce un número de teléfono válido (ejemplo: +34123456789)."
      );
    }

    if (isValid) {
      form.submit(); // enviamos si todo es válido
    }
  });

  function showError(field, message) {
    // Añadir aria-invalid para accesibilidad
    field.setAttribute("aria-invalid", "true");

    // Crear un mensaje de error
    const error = document.createElement("div");
    error.style.color = "red";
    error.className = "error-message";
    error.id = `${field.id}-error`;
    error.textContent = message;

    // Asociar el error con el input
    field.setAttribute("aria-describedby", error.id);

    // Insertar después del campo
    if (field.nextElementSibling) {
      field.parentNode.insertBefore(error, field.nextElementSibling);
    } else {
      field.parentNode.appendChild(error);
    }
  }

  function clearErrors() {
    const errors = form.querySelectorAll(".error-message");
    errors.forEach((error) => error.remove());

    const fields = form.querySelectorAll("[aria-invalid]");
    fields.forEach((field) => {
      field.removeAttribute("aria-invalid");
      field.removeAttribute("aria-describedby");
    });
  }

  function getErrorMessage(field) {
    if (field.validity.valueMissing) {
      return "Este campo es obligatorio.";
    }
    if (field.validity.typeMismatch) {
      if (field.type === "email") {
        return "Por favor, introduce un correo electrónico válido.";
      }
    }
    if (field.validity.patternMismatch) {
      return "El formato no es válido.";
    }
    return "Campo inválido.";
  }
});

  </script>

<style>
    
    #privacyNotice{
        input{
            width: fit-content;
        }
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 10px;

    a{
        color: #6bbd97;
        text-decoration: none;
    }
    }
    .error-message {
  color: #d93025;
  font-size: 0.9rem;
  margin-top: 4px;
}

    .contact-form{
        width: 100%;
        max-width: 800px;
        background-color: #85858596;
        backdrop-filter: blur(15px);
        box-shadow:  0 4px 10px rgba(0, 0, 0, 0.1);
        margin: 50px 0px;
        border-radius: 10px;
        padding: 20px;
        box-sizing: border-box;
        animation: appear linear;
        animation-timeline: view();
        animation-range: entry 0;
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .form-row{
        width: 100%;
        display: flex;
        gap: 10px;
     
        .form-col{
            width: 50%;
        }
    }

    .form-group{
        display: flex;
        flex-direction: column;
        gap: 10px;
        input, textarea {
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
            transition: border-color 0.3s, box-shadow 0.3s;
        }

        input:focus, textarea:focus {
            outline: none;
            border-color: #f0f5f0de;
            box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.2);
        }

        textarea{
            max-width: 100%;
            min-height: 180px;
            resize: vertical;
        }

    

        button{
            border-radius: 0.5rem;
                        text-decoration: none;
                        color: #2e3c2e;
                        padding: 12px 22px;
                        text-align: center;
                        vertical-align: text-bottom;
                        font-weight: 600;
                        transition: all 0.3s ease-in-out;
                        outline: none;
                        border: 0;
                        cursor: pointer;
                        background: linear-gradient(135deg, #4d8b6c 0%, #6bbd97 100%);
    color: #ffffff;
    box-shadow: 
        0 4px 12px rgba(77, 139, 108, 0.2),
        0 2px 4px rgba(77, 139, 108, 0.1);
        }
    }

    label, p{
            margin: 0;
				font-size: 16px;
				color: white;
				font-weight: bold;
        }
</style>
